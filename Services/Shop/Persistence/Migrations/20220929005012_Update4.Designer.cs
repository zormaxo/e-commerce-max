// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Shop.Persistence;

#nullable disable

namespace Shop.Infrastructure.Migrations;

[DbContext(typeof(StoreContext))]
[Migration("20220929005012_Update4")]
partial class Update4
{
    protected override void BuildTargetModel(ModelBuilder modelBuilder)
    {
#pragma warning disable 612, 618
        modelBuilder.HasAnnotation("ProductVersion", "6.0.9");

        modelBuilder.Entity("Application.Entities.ProductBrand", b =>
            {
                b.Property<int>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("INTEGER");

                b.Property<string>("Name")
                    .IsRequired()
                    .HasColumnType("TEXT");

                b.HasKey("Id");

                b.ToTable("ProductBrands");
            });

        modelBuilder.Entity("Application.Entities.ProductMachine", b =>
            {
                b.Property<int>("Id")
                    .HasColumnType("INTEGER");

                b.Property<bool>("IsDeleted")
                    .HasColumnType("INTEGER");

                b.Property<bool>("IsNew")
                    .HasColumnType("INTEGER");

                b.HasKey("Id");

                b.ToTable("ProductMachines");
            });

        modelBuilder.Entity("Application.Entities.ProductMaterial", b =>
            {
                b.Property<int>("Id")
                    .HasColumnType("INTEGER");

                b.Property<bool>("IsDeleted")
                    .HasColumnType("INTEGER");

                b.Property<bool>("IsNew")
                    .HasColumnType("INTEGER");

                b.HasKey("Id");

                b.ToTable("ProductMaterials");
            });

        modelBuilder.Entity("Application.Entities.ProductPhoto", b =>
            {
                b.Property<int>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("INTEGER");

                b.Property<bool>("IsMain")
                    .HasColumnType("INTEGER");

                b.Property<int>("ProductId")
                    .HasColumnType("INTEGER");

                b.Property<string>("PublicId")
                    .HasColumnType("TEXT");

                b.Property<string>("Url")
                    .IsRequired()
                    .HasColumnType("TEXT");

                b.HasKey("Id");

                b.HasIndex("ProductId");

                b.ToTable("ProductPhotos");
            });

        modelBuilder.Entity("Application.Entities.UserPhoto", b =>
            {
                b.Property<int>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("INTEGER");

                b.Property<bool>("IsMain")
                    .HasColumnType("INTEGER");

                b.Property<string>("PublicId")
                    .HasColumnType("TEXT");

                b.Property<string>("Url")
                    .IsRequired()
                    .HasColumnType("TEXT");

                b.Property<int>("UserId")
                    .HasColumnType("INTEGER");

                b.HasKey("Id");

                b.HasIndex("UserId");

                b.ToTable("UserPhotos");
            });

        modelBuilder.Entity("Core.Entities.AppUser", b =>
            {
                b.Property<int>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("INTEGER");

                b.Property<int>("CreatedBy")
                    .HasColumnType("INTEGER");

                b.Property<DateTime>("CreatedDate")
                    .HasColumnType("TEXT");

                b.Property<string>("FirstName")
                    .IsRequired()
                    .HasColumnType("TEXT");

                b.Property<bool>("IsDeleted")
                    .HasColumnType("INTEGER");

                b.Property<DateTime>("LastActive")
                    .HasColumnType("TEXT");

                b.Property<string>("LogoUrl")
                    .HasColumnType("TEXT");

                b.Property<int>("ModifiedBy")
                    .HasColumnType("INTEGER");

                b.Property<DateTime>("ModifiedDate")
                    .HasColumnType("TEXT");

                b.Property<byte[]>("PasswordHash")
                    .IsRequired()
                    .HasColumnType("BLOB");

                b.Property<byte[]>("PasswordSalt")
                    .IsRequired()
                    .HasColumnType("BLOB");

                b.Property<string>("PhoneNumber")
                    .HasColumnType("TEXT");

                b.Property<string>("Surname")
                    .IsRequired()
                    .HasColumnType("TEXT");

                b.Property<string>("Username")
                    .IsRequired()
                    .HasColumnType("TEXT");

                b.HasKey("Id");

                b.ToTable("Users");
            });

        modelBuilder.Entity("Core.Entities.Audit", b =>
            {
                b.Property<int>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("INTEGER");

                b.Property<string>("Action")
                    .HasColumnType("TEXT");

                b.Property<DateTime>("DateTime")
                    .HasColumnType("TEXT");

                b.Property<string>("KeyValues")
                    .HasColumnType("TEXT");

                b.Property<string>("NewValues")
                    .HasColumnType("TEXT");

                b.Property<string>("OldValues")
                    .HasColumnType("TEXT");

                b.Property<string>("TableName")
                    .HasColumnType("TEXT");

                b.Property<int>("UserId")
                    .HasColumnType("INTEGER");

                b.HasKey("Id");

                b.ToTable("Audits");
            });

        modelBuilder.Entity("Core.Entities.Category", b =>
            {
                b.Property<int>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("INTEGER");

                b.Property<bool>("CanBeAdded")
                    .HasColumnType("INTEGER");

                b.Property<bool>("MainCategory")
                    .HasColumnType("INTEGER");

                b.Property<string>("Name")
                    .IsRequired()
                    .HasColumnType("TEXT");

                b.Property<int?>("ParentId")
                    .HasColumnType("INTEGER");

                b.Property<string>("Url")
                    .HasColumnType("TEXT");

                b.HasKey("Id");

                b.HasIndex("Name")
                    .IsUnique();

                b.HasIndex("ParentId");

                b.ToTable("Categories");
            });

        modelBuilder.Entity("Core.Entities.City", b =>
            {
                b.Property<int>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("INTEGER");

                b.Property<string>("Name")
                    .IsRequired()
                    .HasColumnType("TEXT");

                b.HasKey("Id");

                b.ToTable("Cities");
            });

        modelBuilder.Entity("Core.Entities.County", b =>
            {
                b.Property<int>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("INTEGER");

                b.Property<int>("CityId")
                    .HasColumnType("INTEGER");

                b.Property<string>("Name")
                    .IsRequired()
                    .HasColumnType("TEXT");

                b.HasKey("Id");

                b.HasIndex("CityId");

                b.ToTable("Counties");
            });

        modelBuilder.Entity("Core.Entities.Currency", b =>
            {
                b.Property<int>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("INTEGER");

                b.Property<DateTime>("Date")
                    .HasColumnType("TEXT");

                b.Property<double>("Eur")
                    .HasColumnType("REAL");

                b.Property<double>("Gbp")
                    .HasColumnType("REAL");

                b.Property<double>("Try")
                    .HasColumnType("REAL");

                b.Property<double>("Usd")
                    .HasColumnType("REAL");

                b.HasKey("Id");

                b.ToTable("Currency");
            });

        modelBuilder.Entity("Core.Entities.Product", b =>
            {
                b.Property<int>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("INTEGER");

                b.Property<int>("CategoryId")
                    .HasColumnType("INTEGER");

                b.Property<int>("CountyId")
                    .HasColumnType("INTEGER");

                b.Property<int>("CreatedBy")
                    .HasColumnType("INTEGER");

                b.Property<DateTime>("CreatedDate")
                    .HasColumnType("TEXT");

                b.Property<int>("Currency")
                    .HasColumnType("INTEGER");

                b.Property<string>("Description")
                    .IsRequired()
                    .HasColumnType("TEXT");

                b.Property<bool>("IsActive")
                    .HasColumnType("INTEGER");

                b.Property<bool>("IsDeleted")
                    .HasColumnType("INTEGER");

                b.Property<int>("ModifiedBy")
                    .HasColumnType("INTEGER");

                b.Property<DateTime>("ModifiedDate")
                    .HasColumnType("TEXT");

                b.Property<string>("Name")
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasColumnType("TEXT");

                b.Property<double>("Price")
                    .HasColumnType("decimal(18,2)");

                b.Property<bool>("Showcase")
                    .HasColumnType("INTEGER");

                b.Property<int>("UserId")
                    .HasColumnType("INTEGER");

                b.HasKey("Id");

                b.HasIndex("CategoryId");

                b.HasIndex("CountyId");

                b.HasIndex("UserId");

                b.ToTable("Products");
            });

        modelBuilder.Entity("Application.Entities.ProductMachine", b =>
            {
                b.HasOne("Core.Entities.Product", "Product")
                    .WithOne("ProductMachine")
                    .HasForeignKey("Application.Entities.ProductMachine", "Id")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();

                b.Navigation("Product");
            });

        modelBuilder.Entity("Application.Entities.ProductMaterial", b =>
            {
                b.HasOne("Core.Entities.Product", "Product")
                    .WithOne("ProductMaterial")
                    .HasForeignKey("Application.Entities.ProductMaterial", "Id")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();

                b.Navigation("Product");
            });

        modelBuilder.Entity("Application.Entities.ProductPhoto", b =>
            {
                b.HasOne("Core.Entities.Product", "Product")
                    .WithMany("Photos")
                    .HasForeignKey("ProductId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();

                b.Navigation("Product");
            });

        modelBuilder.Entity("Application.Entities.UserPhoto", b =>
            {
                b.HasOne("Core.Entities.AppUser", "User")
                    .WithMany("Photos")
                    .HasForeignKey("UserId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();

                b.Navigation("User");
            });

        modelBuilder.Entity("Core.Entities.Category", b =>
            {
                b.HasOne("Core.Entities.Category", "Parent")
                    .WithMany("ChildCategories")
                    .HasForeignKey("ParentId");

                b.Navigation("Parent");
            });

        modelBuilder.Entity("Core.Entities.County", b =>
            {
                b.HasOne("Core.Entities.City", "City")
                    .WithMany("Counties")
                    .HasForeignKey("CityId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();

                b.Navigation("City");
            });

        modelBuilder.Entity("Core.Entities.Product", b =>
            {
                b.HasOne("Core.Entities.Category", "Category")
                    .WithMany()
                    .HasForeignKey("CategoryId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();

                b.HasOne("Core.Entities.County", "County")
                    .WithMany("Products")
                    .HasForeignKey("CountyId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();

                b.HasOne("Core.Entities.AppUser", "User")
                    .WithMany("Products")
                    .HasForeignKey("UserId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();

                b.Navigation("Category");

                b.Navigation("County");

                b.Navigation("User");
            });

        modelBuilder.Entity("Core.Entities.AppUser", b =>
            {
                b.Navigation("Photos");

                b.Navigation("Products");
            });

        modelBuilder.Entity("Core.Entities.Category", b =>
            {
                b.Navigation("ChildCategories");
            });

        modelBuilder.Entity("Core.Entities.City", b =>
            {
                b.Navigation("Counties");
            });

        modelBuilder.Entity("Core.Entities.County", b =>
            {
                b.Navigation("Products");
            });

        modelBuilder.Entity("Core.Entities.Product", b =>
            {
                b.Navigation("Photos");

                b.Navigation("ProductMachine");

                b.Navigation("ProductMaterial");
            });
#pragma warning restore 612, 618
    }
}
